/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.01.2025 15:04:04

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1680;
#else
constexpr int kTensorArenaSize = 656;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const TfArray<1, float> quant0_scale = { 1, { 2.1136598587036133, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[50] = { 20, -18, -3, 8, -12, -28, 11, 0, -5, -6, 21, 16, -20, -25, 19, 9, -1, -1, 2, -16, -2, -3, 8, 4, -1, -11, 8, -12, 18, 14, 15, -23, -28, -20, 9, 1, 14, 19, 12, 0, 5, -6, 6, 11, -4, -5, 12, 2, -9, 4, };
const TfArray<1, int> tensor_dimension1 = { 1, { 50 } };
const TfArray<1, float> quant1_scale = { 1, { 0.046831302344799042, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { -252, 417, -207, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0011341407662257552, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[50] = { 134, 33, -68, -35, -57, 67, 56, -181, -10, 5, -3, 7, 51, -27, 35, 89, -180, -1, 117, -31, -28, -26, 78, -56, -51, -9, -7, 4, 78, -16, -11, -94, -129, -151, -20, -42, -26, -20, -107, -9, 11, 79, -24, -67, 32, -16, -40, -23, 74, 134, };
const TfArray<1, int> tensor_dimension3 = { 1, { 50 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0063085556030273438, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[50] = { -9, -28, -191, -225, -31, -13, -56, 110, -6, -40, -23, 51, -16, 42, 78, -4, -11, -12, 24, 14, -22, -3, 3, 50, -15, 29, 88, -106, 25, 46, 24, -5, -39, 107, -60, 39, 14, -1, 6, -45, -28, 32, -22, -11, 71, -10, -99, 67, -18, 19, };
const TfArray<1, int> tensor_dimension4 = { 1, { 50 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0076567507348954678, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[50] = { -19, -47, -36, 0, -34, 118, -6, 13, -45, 88, -17, -64, 6, -50, -4, 55, 74, -15, -28, -10, -8, 69, -15, -15, -28, 56, -25, 43, 71, -2, 25, 28, -11, 38, -7, -14, -10, 11, -25, 62, 9, -3, -13, -38, 35, -24, -3, -15, -35, 119, };
const TfArray<1, int> tensor_dimension5 = { 1, { 50 } };
const TfArray<1, float> quant5_scale = { 1, { 0.009889526292681694, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[50] = { 41, -28, 31, -37, -34, -122, -48, 73, 132, -55, 160, -55, -64, -48, 25, 147, -64, -9, -60, -29, -19, -79, -122, -7, -81, -63, 41, 244, 13, 3, -39, 12, -82, 25, 4, 104, 57, 184, 110, -6, -100, 91, -73, 11, 171, -23, 106, -56, 322, 130, };
const TfArray<1, int> tensor_dimension6 = { 1, { 50 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0041581881232559681, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[50*33] = { 
  -51, -10, -7, 2, -33, 12, -20, 7, 10, 8, -66, -7, -4, 16, -4, 7, 2, 7, 4, 7, 6, -8, 7, 5, 4, 5, -3, -1, 8, -7, 11, -10, 5, 
  -3, 2, -2, 6, -20, 0, -16, 7, -1, 0, -30, 64, 10, -29, 7, 0, -2, -19, -11, 0, 7, -10, 15, 5, 5, 6, -6, -1, -14, 0, 1, 4, 3, 
  -12, -1, -1, -7, -8, -14, -14, -1, 8, 11, 5, -16, -12, -7, -1, -6, 1, -4, 1, -5, 11, -8, -3, -3, -3, -2, -16, 1, 2, 3, 7, 4, -3, 
  -60, -7, 1, -9, -6, 2, -13, -6, -12, 5, 5, -82, -1, 20, 1, -13, 1, 10, -8, -1, 10, -3, -26, 5, -15, 7, -17, 5, 2, 0, -9, 3, 4, 
  -3, 0, 10, 6, 3, -7, -1, -5, 2, -7, -8, 3, -1, 6, -12, -1, 3, 3, -1, -12, 5, 16, -6, -8, -4, -1, -4, -6, -11, 9, 4, -1, -10, 
  20, -12, 7, -4, -3, -3, 7, 8, -6, 3, 6, 7, -5, -33, 1, 1, -2, 16, 8, 11, -2, -44, 20, -10, -81, -4, -26, 0, -17, 3, -11, -5, -56, 
  -34, 8, -47, 1, -59, -6, -25, 6, 2, -5, -66, 3, 0, -6, -10, -10, 9, -11, 0, 8, 4, -7, 8, -4, 3, -5, -15, 2, -16, 8, -7, 3, -1, 
  -18, -16, 6, 15, -6, -7, -18, -2, -4, 7, -32, 4, -19, -4, -1, -2, -1, -13, 9, 10, 11, -10, -2, -11, -9, 7, -5, -1, -18, -12, 6, -4, 1, 
  2, 9, -1, -16, -21, 0, -17, -2, -1, -4, 3, 20, -13, 0, 4, -9, 6, -8, 1, 5, -12, -15, -8, -3, -2, 4, 13, -1, 1, -1, 11, -7, -11, 
  4, 7, 4, -6, 6, 0, -5, -11, 8, 10, -2, -6, -15, 31, 3, 1, 4, 29, -9, 9, -3, 19, -58, -16, -6, -4, -17, -2, -26, 1, 0, 3, -26, 
  -58, 0, -7, -3, -30, 5, -43, 8, -7, -9, -54, -6, 11, 56, 7, -1, -3, 13, 8, -5, 11, -11, -54, 0, -15, -4, -13, -4, -9, 1, -6, -1, 5, 
  8, -6, 15, -4, 0, -10, 6, 8, 6, -7, -6, -32, -18, -4, -24, -1, -9, -1, -1, -2, -3, -4, -27, -9, -15, -2, -10, -6, -29, -7, 3, 7, -29, 
  7, -8, -19, 0, -3, -1, -18, 10, -11, 2, -10, -4, 8, -14, -5, -13, -2, -2, -5, 12, -4, -36, 14, -6, -10, -4, 7, 1, -12, 12, 8, -9, 1, 
  10, 9, 7, 2, 24, 6, 12, 11, -12, -1, 6, 20, -5, -19, 3, -14, 1, 6, 1, 7, -8, 26, 19, 6, 7, 4, 14, -1, 14, -7, -9, -6, 6, 
  -36, 10, 1, 6, -36, 7, -13, 3, 3, 3, -47, -3, -7, 22, -8, -10, -17, -18, 0, 6, -9, -21, -60, -7, -16, -3, -10, -4, -1, 2, 3, -1, -28, 
  -26, 0, -32, 8, -49, -2, -25, 8, 3, -4, -58, 36, -23, 1, -7, 5, 10, 1, 7, -2, -1, -19, 8, 6, 9, 3, 7, 7, 10, -11, 9, 4, 2, 
  -13, -6, -2, -7, -2, -11, 3, 3, -6, -9, 3, 1, -1, -4, 0, -2, 0, -10, 4, 6, 11, -4, -1, -1, -7, -9, -7, -8, -7, 5, -11, 9, 3, 
  -42, -9, -9, -2, -2, -9, -7, 1, -11, -2, 1, -43, 5, 3, -14, 5, -12, -11, 11, 3, -5, -6, -23, 1, 0, 7, -14, 3, 3, 12, 9, 10, 2, 
  -27, -11, -15, 6, -51, -7, -12, 9, 8, -6, -53, 1, 9, 9, 6, -4, -2, 12, 9, -8, 1, -6, -8, -6, 8, 3, 9, 0, 15, 12, -7, 10, -2, 
  9, 4, -6, 8, -5, 5, -6, 10, -4, 10, 0, 6, -19, -11, -12, -16, -27, -4, 2, -4, 10, 15, -15, 0, -1, -2, 7, 14, 6, 2, 8, 5, -1, 
  -33, -11, -34, 5, -33, 17, -15, -4, -11, -11, -44, 1, -9, -4, -12, -17, 5, 1, -3, -5, 9, -3, 6, -9, -3, -1, 8, -7, -7, -6, 7, 6, 5, 
  10, -1, 6, -2, -9, -20, -13, 9, -6, 3, -5, -13, 11, 28, -6, 10, -8, -14, 3, -1, 12, 53, -56, -17, -11, -2, -21, 7, -19, 12, -9, -7, -39, 
  -46, 1, -59, 3, -96, 2, -67, -11, -2, -2, -127, 44, 9, 20, 4, 6, 5, 17, 8, -2, 0, -12, 8, 8, 3, 1, 7, 5, 15, -1, -8, -6, -2, 
  -13, -5, -28, 0, -40, -1, -16, 3, -8, -5, -22, 43, 10, 14, -3, 1, -22, -28, 9, 0, -7, 0, 15, -18, 3, -6, 8, -13, 4, 4, -10, -4, 2, 
  8, -11, -15, 6, -4, -5, -9, -5, -5, 4, 11, -5, -4, -13, -1, -23, -20, -21, 10, 8, -11, -24, 3, 6, 0, -11, -3, -18, -7, 0, 4, -3, -1, 
  -36, -10, -30, 0, -61, -1, -41, 7, -11, -10, -74, 4, 11, 0, 5, 6, 5, -4, -11, -4, 0, -1, 9, -5, 2, -3, 9, 1, -6, -6, 3, -9, 2, 
  11, 2, 10, 0, 4, -1, -2, -10, -1, 9, -2, -6, -2, 24, 3, -6, 4, -4, 9, 11, 1, 31, -65, 2, -1, 1, -1, -4, 1, -2, 3, 7, 4, 
  1, -20, -6, -13, -13, -8, -6, -6, -10, -10, 3, -4, -5, 0, -17, -11, -14, 8, 5, 1, 4, 6, -7, -2, 3, 1, 0, -6, 6, -11, 2, 7, 6, 
  -10, 5, -1, -6, 10, 6, -1, -10, -3, 12, -5, -2, 9, 26, -11, -10, -12, -6, 9, 6, -9, -7, -59, -10, -7, -2, -25, -6, -12, -10, 5, 7, -20, 
  4, 5, 6, 9, 0, 1, 5, 3, -8, -11, -9, -17, -1, 22, -2, 5, -8, 4, 8, -5, 12, 6, -42, 5, -11, -4, -6, 5, -17, -5, 8, -3, -22, 
  -81, -7, 4, -6, 7, -4, -12, -8, 1, -7, -13, -83, -2, 17, -5, -11, -1, -15, 2, 2, -6, -22, -6, 13, -4, -3, 2, -14, -8, -2, -10, 7, 3, 
  12, -2, 2, -1, 19, -4, 2, 5, -5, 4, -8, -36, 0, -1, 3, 0, -1, 5, -12, -7, -1, 28, 22, -13, 8, -4, 11, -4, -10, 6, -8, -11, -4, 
  6, 6, -14, 1, -13, 8, -7, -12, -2, -5, -18, -16, 3, -12, -2, -12, 2, -6, 7, -9, -4, -1, 23, 1, -3, 1, 14, 6, -8, -4, 0, -3, 0, 
  2, -1, 7, -1, 16, -1, -5, 7, -4, -2, 3, -6, 12, 15, 1, 10, -2, 2, -7, 7, -7, 19, 14, -14, 13, -12, 14, 6, -1, 1, 4, 7, 2, 
  -49, 2, -24, 1, -45, -5, -8, 2, 5, -1, -72, -21, 3, 7, -3, -3, -4, -9, 7, 4, 1, 15, 8, 3, 8, 9, 4, 1, 1, 3, 10, 11, -12, 
  16, -14, -7, -24, 1, -8, -8, 10, -5, -8, 4, -15, -16, -2, 3, 8, 14, 14, -11, -1, 7, 9, -15, -5, -13, 3, -13, -8, -8, -6, -5, 5, 6, 
  19, 4, 1, 2, -1, 2, 8, -4, -11, 3, 0, -21, 7, 12, -1, -13, 2, -17, 6, 5, 9, 30, -69, 5, 2, 1, 4, -2, -2, -5, 10, 3, 24, 
  -15, -6, -14, -15, -6, -3, -8, -3, -3, -2, -24, 15, 4, 14, 6, -3, 10, -4, 7, 0, 8, -12, -23, -10, -23, -16, -14, 1, 7, 4, -10, 9, -37, 
  -28, -7, -7, -2, -13, -7, -8, 0, -10, -5, 13, -14, 5, -15, -2, -17, -17, -16, -9, 10, -10, -41, 13, 2, -12, 1, -15, -24, -13, -8, -7, -2, 6, 
  2, -20, -2, -10, 4, -5, -2, -10, 7, 9, -5, 18, -15, -5, 5, 5, -10, 0, -2, 8, 8, 6, 12, -3, -12, -1, 7, -2, -13, 5, 6, -8, 4, 
  -25, 9, -32, 3, -46, -10, -18, -1, 11, -5, -48, -18, 0, 8, -1, -11, -6, -7, 6, -11, -10, 4, -4, -2, -12, -17, 3, -12, -5, 4, 9, 8, -4, 
  -10, -6, 13, 5, -8, -6, -7, 9, -10, 8, 6, 35, -15, -3, 2, -12, -4, -17, -1, 2, -11, -5, 9, -5, -13, -5, -7, 2, -3, -4, -11, -2, -13, 
  -46, 19, -41, 8, -82, 4, -47, -3, -6, -10, -95, 8, 1, -13, -1, 9, -2, -13, -3, 5, 2, 6, 5, -6, 1, -7, 20, -4, 10, -10, -3, 5, 1, 
  -56, -1, -12, 1, -41, -9, -22, 10, 12, -12, -54, -51, 0, 3, -5, -16, -5, -11, -9, 11, -5, 4, 21, 4, -9, -1, -21, 5, 1, 11, 5, 12, -13, 
  -9, -2, -1, 7, 7, -9, 0, -7, -5, 7, 16, -20, -8, -3, 5, -7, -6, -1, 9, 1, 2, -16, -10, -5, -7, -10, -8, -3, -2, -4, 3, -1, 7, 
  -10, -6, 1, 2, 5, -1, -3, 8, -2, -5, -8, -5, -7, 14, -5, 12, 7, 1, 7, 8, -4, 9, -12, -16, 5, -12, 0, -7, -8, -5, 12, 12, 0, 
  3, -12, -10, 9, -26, 2, 1, -1, 11, 7, -16, 51, -20, 0, -6, -22, -12, -5, 10, 3, 8, -29, 3, -19, -10, -15, -15, -5, -13, 3, 3, 12, -19, 
  -40, 7, -59, 8, -76, -2, -47, 10, -12, 11, -56, -1, -7, -19, 7, 3, 1, 4, 9, -9, -5, 2, 17, -6, 7, 5, -6, 1, -3, 6, 1, -11, -3, 
  7, 6, 1, -3, 8, 0, 0, -2, -2, -8, 4, -32, -7, 14, -2, 11, -7, 19, 6, 1, 3, 23, -10, 0, -15, 3, -6, 3, 0, 11, 6, -7, 5, 
  10, 11, 2, 4, 4, 3, 11, -2, -1, 8, -1, -20, 3, 23, 8, 8, 3, -1, -1, -12, -7, 28, -71, -7, 17, 0, -8, 2, -11, -10, 8, 10, -3, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 50,33 } };
const TfArray<1, float> quant7_scale = { 1, { 0.022156499326229095, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[50*50] = { 
  26, -54, -22, 78, 23, 1, 16, 53, 16, 39, 25, -12, 12, -63, 103, 17, -26, 67, 35, 9, 62, 1, 17, 28, 32, -35, 34, 13, 67, 22, 104, 9, -13, -34, 47, 23, 5, 30, -6, 22, 49, -31, 30, 90, 22, 9, 22, 29, 0, 22, 
  -44, -29, -16, -42, -3, 48, -41, -8, -73, 34, 30, 21, 27, -40, -2, 8, 17, 27, -30, 26, 13, -7, -5, 11, -20, 11, 9, 14, -22, 7, -4, -20, -14, -54, 4, 0, -32, -34, -58, -17, -12, -46, 17, 5, -24, 9, 94, -64, -26, -40, 
  -44, -22, -16, -24, 35, 0, 29, 14, 5, -36, -73, -32, -24, 14, -4, -1, 34, -9, -5, -22, -13, -42, 19, -32, -3, -15, -38, 5, -44, -37, -3, -39, -15, 1, 15, -2, -18, -2, 14, -5, 7, -12, -18, 11, -26, 12, -22, 13, -39, -37, 
  -38, 5, 19, 26, -28, -69, -3, -33, -46, -33, -26, -11, -1, 8, -36, 23, 17, 25, -25, -16, -22, -7, -33, -1, 21, -33, -12, 9, -17, 21, -28, -3, -37, 11, -31, -18, 36, -26, 8, 29, 26, -18, -17, -21, -56, 2, -15, 11, -41, -28, 
  -6, 0, 1, -11, 14, -30, 16, 11, 6, -45, 5, -16, -3, 5, -12, 14, -1, 3, -17, -27, -36, -5, -2, -32, -44, -32, -37, 10, -50, -26, -34, -10, -47, -31, -16, 32, -6, -17, -17, 15, 8, 13, 18, 2, 51, -42, -9, -50, 26, -16, 
  14, -35, -44, 23, 13, -52, 2, 7, 16, -13, -61, 20, 0, -34, -46, 12, -1, -27, -28, -9, 28, -9, -41, -15, -29, -31, 14, -13, -23, 23, 32, -49, -7, -38, -13, 23, -3, 1, -19, -40, -37, -46, -41, -8, -24, -45, 2, -7, -19, -41, 
  15, -24, -25, -20, 17, -7, -31, -28, -7, 0, 3, 1, -19, -20, -17, -18, 1, -49, 1, -19, -14, -29, -37, -23, -29, -11, -13, -36, 25, -45, 10, -16, -5, -41, -26, -4, -54, 30, 15, -13, 11, 0, -7, -11, -32, 6, 21, 13, -10, 15, 
  -58, -11, 12, -5, -2, 31, -33, -38, -38, -12, 3, 10, 27, -1, -7, -7, 26, 22, -35, -49, -18, -52, -38, -23, -28, -61, -30, 28, 20, -51, -11, 14, 40, -2, -62, -5, 8, -25, -74, -24, 2, 31, -78, -127, 5, 8, -15, 22, 22, -12, 
  -32, -15, -2, 10, -26, -10, 8, 2, -58, -36, -17, 2, -17, -24, 8, -37, -29, 3, -8, -6, -34, 11, -27, -37, -22, -40, 0, 13, 1, 9, -11, -8, -35, 10, 29, -25, 5, -21, -26, -40, 30, 32, 19, 23, -6, 12, -22, 13, 9, -15, 
  -25, 7, -9, -6, 7, -19, -2, -16, 9, 14, 8, -25, -39, -23, -41, -35, 5, 5, -3, -31, 3, -2, -5, -5, -36, -48, -28, 5, 6, -22, -18, 19, 10, -8, 14, 12, -26, 21, -6, -1, 10, 9, -11, -37, 8, -1, -33, -31, 7, -7, 
  6, -17, -23, -45, -20, 27, -27, 26, 8, -17, -13, -25, 2, -42, -13, -3, -27, 14, 18, -21, -18, 13, 8, 15, 5, -24, -40, 21, -9, 2, -36, 6, 3, -8, 20, 8, -39, -23, -30, -34, 21, -15, -33, 2, -37, -11, -41, -40, -44, 10, 
  -16, 44, -12, -39, 41, -70, -10, 12, 16, 6, -100, -15, -7, 23, -43, 40, -5, -8, 2, 29, -13, 14, -14, 16, -29, 6, 14, -18, -50, 21, -5, -12, -16, 7, -9, 11, 0, -63, -16, 20, -2, -4, 7, -29, -38, 20, 53, -50, 8, -17, 
  21, -26, -35, -5, 8, -8, -46, 14, 9, 13, 38, 20, -27, -34, 38, 16, 37, -25, 0, 7, 32, 14, -42, -14, 7, -28, -8, 11, 28, -6, 13, -12, -21, -23, -18, -17, 3, -11, -8, -24, -11, -57, 23, -6, 9, -22, 28, -20, 3, 11, 
  -8, 4, 9, 2, 21, -37, -5, 27, -15, -30, -38, 3, -32, -45, 12, 8, -8, 2, 2, -21, -11, 11, -9, 8, 28, -30, -41, 24, -18, 3, -23, 9, -22, -44, -26, -11, 15, -17, -1, -23, 25, 3, 9, -24, -24, 18, -18, -18, 7, -14, 
  -14, -45, -63, -2, 17, 5, -54, -20, -37, 2, 16, 30, 8, -19, 5, -24, 0, -2, -7, -23, -16, -26, -57, 1, 3, 7, -9, 4, -16, -40, -51, 1, -2, -67, -16, -2, -7, 32, -21, -40, 13, -70, 6, -25, -59, -58, 26, -52, -14, -114, 
  35, -27, 12, 2, 6, -40, 19, 19, -3, 10, 32, 0, -13, -34, 9, 4, 6, -20, 28, 8, -14, -58, -1, -36, -3, 4, 10, -40, 15, 11, 42, -39, -47, -29, 23, -38, -22, 4, -5, 14, 10, -11, -30, 9, -10, -41, 1, -34, -3, -13, 
  -67, -6, 18, 4, 3, -14, -64, -53, -48, 47, -43, 35, 3, 38, -19, -57, 19, -3, -6, -94, -64, -4, -69, -29, -37, -56, -11, -7, 29, -9, 19, 44, 21, 27, -20, -23, -53, -48, -46, -28, 7, 22, -80, -91, -48, -5, -25, 4, -33, -46, 
  36, 2, 30, 0, 34, -32, 57, -5, -1, 0, -3, 27, 22, -27, -4, 8, 20, -11, 28, -5, 39, 35, 38, 69, 15, -1, 0, 2, 64, 51, 12, -28, -19, -4, 22, 27, 18, 35, 34, 1, -12, 12, 28, 24, 22, 12, -4, 30, 23, -29, 
  32, 15, 3, -64, 25, -3, 7, 23, 12, 6, -10, -17, -21, -13, -41, 24, -18, -35, 44, -18, -10, 2, 56, 62, 21, 14, -32, -7, 31, 28, -58, -24, -2, 8, 30, -47, -49, -3, 13, 14, 21, 30, 70, 12, 22, 17, 120, 19, -16, -1, 
  -18, 9, 2, 21, -7, -47, -54, -3, -15, -15, -33, 11, -23, -53, -4, 11, 38, -38, -9, 17, -43, 34, 8, -4, -31, -27, -20, -36, -16, -20, -50, -9, 15, 18, -34, -7, -36, -44, -39, -17, -39, -37, -8, -32, 0, 19, -20, -13, 7, -11, 
  -3, -18, 16, -7, -39, -36, 0, -3, -46, 17, 1, 17, -31, 16, 8, -4, 0, -14, 5, -52, -32, 20, -21, -44, 3, 5, 10, 12, -8, -13, -4, -20, -22, -9, -4, -14, -10, -6, 12, 21, -21, 15, -5, -40, -40, 23, -28, -4, -14, -11, 
  -14, -36, -18, 6, -3, 3, 26, -3, 3, 21, -15, -16, -31, -44, -26, -34, 28, -31, -12, -31, -34, -18, 22, -26, -1, -42, 11, -10, -41, -33, -22, 8, 8, -15, 2, -21, -35, -36, -9, -36, -36, -34, -33, 6, 16, -11, -38, 16, -18, -15, 
  11, -15, -4, 37, -9, -45, 32, 24, -7, -19, 48, -14, 2, -44, 24, -2, 1, 12, -7, -56, 2, 21, 19, 1, -9, 55, 18, 22, 51, -14, 7, 9, -1, -31, 5, 25, 54, 72, 40, 23, 22, -19, -18, 20, -10, 16, -18, -36, -13, -8, 
  -67, 12, -1, -3, 29, 11, -57, -7, -17, 6, -41, 13, 15, 21, -38, -44, 3, 9, -17, -6, -27, 37, -35, -51, -26, -54, 36, -40, 28, -12, 9, 16, -8, 22, -68, 42, 38, 26, -50, 8, -5, 2, -19, -37, -9, 15, -47, -13, 21, -6, 
  -26, -23, -28, -44, 31, -42, -19, 9, -28, -6, -41, -29, -41, -1, 21, -18, 34, -1, -30, 18, -31, -21, -19, 3, -24, -31, -19, -2, -29, 24, 5, -2, -41, -22, 18, 8, -38, -72, 11, -17, 32, -15, 16, 40, -45, 12, 24, 3, 22, 15, 
  -35, -22, -30, -13, -12, -36, -1, 21, -7, 7, -26, -19, -27, -32, -8, 19, -9, -1, -15, -3, -23, -53, 20, -25, -20, 2, -27, 8, -12, 18, -5, -36, -53, 19, 9, 21, -32, 10, -15, 15, -2, -17, -13, -24, -23, -34, 13, -2, -35, -37, 
  3, 36, -25, -53, -18, -88, 8, 35, 7, -16, -34, -37, -22, 9, -31, -1, 32, -25, 17, -1, 35, -19, 29, -19, -3, -6, -51, -21, -42, -23, -31, -64, 18, -6, -15, 24, -115, -42, 2, -41, 21, 11, 36, -35, -16, -53, -48, -7, 5, -26, 
  -32, -45, -8, 20, 22, 6, -9, -16, -31, -20, -42, 30, -4, -35, -33, -17, 22, 31, 11, -51, -26, 47, -38, -16, -29, -26, -9, 26, 4, 10, -3, 30, -8, -7, -30, 4, 12, 15, 34, -38, -45, -11, -54, -17, -18, 16, 15, -8, -47, -16, 
  -38, 4, 18, 17, 44, -25, -37, -19, 20, 20, -61, 5, -15, -13, 8, -42, -3, 4, -13, 43, -2, 34, -83, -42, -32, -38, 33, -16, 9, 47, -52, -23, 2, -7, -32, -43, 71, 22, 0, 17, -27, -12, -6, -15, -29, 39, -26, -45, 18, 47, 
  -6, -32, -23, 23, -31, -26, 11, 5, 12, -8, 16, -6, -42, -34, 9, -37, -5, -39, -26, -17, -49, -42, -14, 15, 20, 23, -26, -10, -20, -6, -4, -30, 13, 8, -4, -7, -11, 22, -32, -9, -23, 24, -39, 23, -12, 7, -27, -44, -2, -14, 
  0, -30, 22, -15, -10, -30, -19, 20, 23, -22, -9, 21, -33, -21, -30, -18, 26, 24, -10, -12, 4, -8, -29, -2, -10, 13, 17, 26, -48, -27, 33, 2, -34, -11, -9, -25, 7, -24, 6, -14, 21, 3, -12, 3, -22, -9, 15, 17, -5, -29, 
  23, -21, -10, 2, 2, -1, 28, -4, -8, -23, -9, 19, 1, 0, -4, 19, 19, -18, 8, 12, 35, -62, 17, -7, 20, 19, 33, 13, -46, -55, 25, 23, -29, -11, -39, -8, -67, 15, -1, -12, -11, 50, -44, -69, -46, 25, -80, -7, -24, -32, 
  -16, 67, -1, -88, 36, -11, -16, 5, 13, 4, -67, -6, 24, 58, -75, 14, 14, -8, -17, 21, -29, -32, -8, 34, 4, 25, -55, 31, -38, -13, -41, -16, 43, -9, -13, -24, -65, -32, -5, 33, -11, 19, 27, -24, -2, 13, 11, 15, 1, -56, 
  -17, 30, -17, -21, 9, 41, 18, 17, 8, -33, -36, -30, 7, 3, -32, -19, -26, -50, 1, -43, 28, -14, 13, -24, 21, -14, -21, -25, -10, -3, -9, 22, 22, 26, 10, -31, -86, -7, -34, 25, -8, 2, 9, -49, -48, -20, 32, 8, 23, -65, 
  -34, -28, 7, 25, 25, 10, -22, 27, 26, -35, -19, 20, 0, -39, -46, -3, 17, -2, -35, -33, 12, 12, -10, 14, 16, -30, -24, 14, -23, -15, -17, 28, -23, 19, 0, -3, 18, -4, -15, 3, 22, -40, -28, 23, -17, -21, -35, 6, -30, 15, 
  -14, 21, -10, -42, 17, -83, -49, -5, 21, -21, -6, 8, -29, 15, -8, -32, -30, -18, -28, 10, -62, -17, -16, -22, -8, -41, -1, 17, 4, 26, 2, -67, 11, -60, -69, -22, 12, -116, -6, 16, 2, -17, -32, -27, -41, -28, -22, -55, 50, -29, 
  16, -4, -9, -9, 17, 19, 24, 18, -12, 7, -23, -5, 1, -48, 4, 12, -33, 25, -9, -4, -23, -10, 12, -26, -15, -29, -24, 20, 3, -12, 21, -6, -37, -8, 4, -21, -25, 17, -6, -4, -17, -40, 20, -26, -48, 2, -13, -41, -13, 13, 
  -32, 13, -10, -18, -38, -29, -17, -5, -10, -7, -2, -15, 5, -12, 28, -34, -19, 22, -38, -48, -31, -23, -21, -35, -39, -28, -21, -40, -8, -33, -30, 11, -35, -17, 10, 6, 13, -9, -27, -31, -32, 7, -21, -20, -20, -1, -35, -9, 9, -18, 
  -7, -20, 28, -5, -10, 51, 56, -49, -27, -18, 11, -27, 14, 11, 37, -26, 21, 10, 14, -50, 6, 11, 44, 2, -25, 29, -22, 0, 51, -20, -39, -24, 12, 15, 10, -52, 10, -7, 32, 11, 26, -14, 67, -38, 11, 21, -73, 12, 25, -17, 
  3, 12, -12, -26, 34, -16, -6, -32, 25, -1, -55, -14, 23, -35, -22, -32, 11, 19, -37, -16, 7, 45, -39, -4, -58, -53, -19, -39, -6, -50, -7, -50, -42, 3, -112, -37, 10, -14, -8, 2, -8, -41, -80, -39, 14, -14, -22, -29, 3, -35, 
  42, -66, -1, 37, -11, -28, 60, -18, -8, 3, 31, 14, -30, 19, -16, 22, -27, 11, -8, -11, -16, -54, 7, 26, 2, 18, 4, -36, -27, -13, 37, -34, -15, 6, 37, -13, -13, 25, -3, -17, -18, 10, 13, 40, -27, -36, -10, -17, 25, -4, 
  -20, -50, -32, -48, -24, 8, -13, 6, 2, -11, 32, 2, -40, -21, 3, 14, -15, -36, -47, -16, 8, -8, -12, -11, 3, 9, -26, 8, -28, -13, 0, -10, -13, -78, -10, 4, -9, -28, 18, 1, 13, -37, -40, -81, -11, -20, -6, 6, -37, -56, 
  20, 12, 18, -39, 17, 18, -27, 1, 4, -1, -56, -30, 15, 12, -53, 25, 8, 14, 7, -3, 44, -13, 25, 26, -1, 13, 24, 30, -21, -63, -5, -35, -44, 8, -50, 1, -59, -62, -50, 12, 5, 7, 35, -16, -1, 12, 89, 7, -30, -34, 
  -27, 1, -2, -47, 14, -17, -15, -23, 15, 44, 21, -1, -3, 10, -35, -23, 24, -10, 0, -13, 18, 58, -63, 26, 20, -1, 34, 26, 27, 40, 19, 31, 34, 18, -3, 29, 69, -51, -1, -11, -37, -34, -69, -40, 30, -11, -42, -22, 21, 45, 
  8, -4, -32, 4, 19, -35, 12, 52, 6, 20, 63, -40, -20, -47, 44, -29, -2, 6, 5, -10, 37, 51, -27, 10, 5, 35, -5, -35, 94, -29, -54, -16, -42, 1, -12, 22, 0, 15, -22, -36, 28, 9, 37, 0, 11, 19, 3, -46, -13, 9, 
  -66, -6, -23, 6, -21, -48, -69, -59, 21, 34, -40, 0, -5, 34, -114, -75, -14, -2, -24, 45, -12, 9, -75, -10, 12, -43, 44, -15, -23, 2, -30, -14, -2, 23, -15, 11, 65, -25, -33, 22, -19, -13, -54, -21, -17, 21, -14, -54, 22, 63, 
  9, 6, -8, -23, -44, 3, -17, -33, -37, 19, -27, 22, -41, -4, 0, -32, -12, 5, 3, -12, 10, -29, -44, -6, -34, -30, -55, -27, 5, -47, 8, -45, -2, -37, 13, -10, -55, 10, 2, 22, 12, -22, -20, -20, -35, -9, 7, -23, 19, -60, 
  2, 14, -11, 12, -47, 45, -3, 3, -42, -4, 62, -4, 29, -15, -14, 5, 14, -27, 35, 21, -13, 16, 6, 19, 22, 47, 3, 3, 5, 8, 65, 12, -51, 9, 2, 8, -26, 61, 39, 24, -1, 4, -25, -5, 49, 17, -15, -2, 14, -9, 
  29, -81, -17, -3, -5, -20, 42, -22, -17, -11, 24, 6, -49, -74, -23, -2, -32, -1, -5, -27, -14, -19, -40, -19, -4, 23, -10, -9, 42, 2, 26, -23, -68, -66, -1, 2, -26, 11, 32, 2, 2, 2, 5, -8, -17, -44, -5, -21, -25, -64, 
  11, -53, -36, 12, -5, -58, 35, -1, -6, 1, 27, 121, -29, -70, 73, 22, -2, -28, -12, -23, -53, 24, -10, -12, 24, -30, -3, 16, 51, 63, 36, -46, -53, -62, -13, -3, 20, 86, 16, 24, -23, -60, 17, -17, -17, 6, 35, -4, -48, -28, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 50,50 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0069324569776654243, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[50*50] = { 
  -8, -29, 29, 3, 7, -11, -3, -20, 12, -23, 0, 15, -6, -18, 2, -30, 20, -30, -7, -20, 8, -11, -26, -8, 21, -16, -40, -29, 6, -30, -10, 22, -21, -16, -10, -65, -7, -18, -32, -15, 25, 2, -8, -40, 1, -1, 7, -31, 3, 9, 
  7, 2, -9, -6, 5, -19, 16, -21, 24, 17, 7, -14, 1, 21, -30, 20, 11, -22, -12, 6, 2, -2, 11, -28, 19, -1, 12, -5, 1, -14, 8, -35, -4, -1, 18, -16, 0, 14, 0, -22, -6, -17, -27, -6, -2, -23, 16, -25, -29, -3, 
  -42, -34, -6, 2, -32, 15, 10, 21, -20, 11, -14, -19, -27, -14, -35, 4, 42, -13, -29, -43, -2, 31, -6, -2, 17, 22, -41, -21, -26, -28, -2, -14, 5, 13, -20, -45, -8, -2, -15, -20, 14, 2, -7, -23, 5, -13, 12, -66, 4, -30, 
  -27, 4, 11, 3, 29, -4, -20, 23, -8, 0, -15, -27, 4, -19, -16, -21, 50, -3, -61, 0, 15, -1, -17, 8, 1, 21, -31, -4, -22, 17, -8, 6, 13, 11, -20, -30, -9, -14, 0, -35, 0, -13, -8, 19, 12, 0, -19, 19, 8, 15, 
  -14, -22, 6, 11, 4, 15, 3, -5, -18, -8, -3, 4, -39, 12, -27, -18, -2, -8, -8, 3, -18, 33, 38, 1, -7, 9, 5, -1, -28, -14, 16, -14, -34, -35, -8, 3, 21, 22, 3, 5, -14, 20, -13, -1, 40, -25, -16, 3, -93, 3, 
  5, -15, -23, -8, -2, -4, 9, 2, 22, 9, -4, -32, -1, 4, 33, 2, -8, -20, 3, 4, -18, -5, 0, -7, 3, 26, -21, -1, -2, 10, 16, -18, -15, -42, 15, -4, -14, 7, -18, -25, 24, 20, -25, -9, -14, -35, -33, -43, 49, -12, 
  -25, 45, 12, -5, -5, 3, -3, -9, 2, 21, 13, 7, -3, -3, -3, -5, -14, 20, 28, -6, -15, -10, -23, -22, 8, 2, 37, 12, -33, 0, -12, 17, 27, 9, -18, -9, 23, 9, 10, -1, 0, -15, 20, 6, 0, 4, 1, 2, -19, 17, 
  23, -30, -12, -15, 7, -6, 20, 1, 11, 19, -17, 3, 28, -21, 11, 10, 6, 8, 16, -13, -4, 12, 29, 10, 15, -3, 6, -9, 18, -10, -14, 2, -29, -32, -16, -25, -16, 17, -4, -11, 16, 9, -6, -24, 14, -4, -12, 28, 6, -12, 
  0, 9, -21, -17, 1, -18, 3, -7, -13, 11, 5, 3, -23, -6, 15, -6, 3, 1, -17, -2, -9, -28, 15, -1, 16, -10, -3, -24, -13, 13, 16, -9, -23, -7, 13, 11, 13, -19, -5, 7, -34, -1, 12, -26, 22, 15, -12, -26, -26, 24, 
  1, -14, 0, 3, 19, 19, 20, 8, 9, 12, 0, 1, -22, -14, 5, 2, -36, -8, -19, 14, 0, 11, 21, 1, -1, -8, 25, -2, -27, -20, -11, -26, 13, -2, 15, -6, -1, 6, -20, 6, 18, 3, -1, -26, 4, -20, -14, -24, -1, -18, 
  -19, -7, -3, -15, 14, -10, 7, -23, 1, 1, 4, -25, 22, 8, -19, 25, 0, -11, -8, -23, -21, 8, -37, 1, 17, -21, -31, 2, 10, 17, -23, 4, -3, -11, 7, 0, 7, 21, -14, -16, -33, 37, -17, 2, -36, -21, -24, -34, 23, -8, 
  -13, 30, 9, -25, -2, 7, -12, -27, -2, 6, -6, -9, -12, -20, 24, -27, -47, -22, 0, -11, -27, 6, -39, 1, 15, -1, 22, -4, -14, 2, 3, -37, 16, 12, 23, -1, 2, -16, -14, -7, 16, 44, 3, -20, -20, -21, -23, -19, -11, 31, 
  6, 8, 7, -2, -3, 5, -8, -10, -22, -7, 15, 11, -25, -2, -18, -14, -13, -10, -8, 15, 13, 7, 14, 8, -7, -15, 6, -12, -29, 21, -4, 0, -20, -21, 11, -9, 3, -21, -19, -4, -28, 7, -17, -19, 5, -7, -25, -22, -29, 2, 
  14, 4, -2, 8, -3, 17, 14, -10, 23, -14, 19, -29, 4, -20, 28, -11, 0, -8, -21, 14, -9, -25, 8, 4, 16, 3, -9, 9, 11, -5, -10, 13, -37, -24, -10, -10, 2, -9, 2, 4, -5, -2, 11, -4, 11, -21, 7, -25, 20, 51, 
  18, 13, -25, 2, 4, 8, 9, 14, 4, 4, -22, 4, 16, -14, -15, 27, -27, 12, -26, 23, -5, -4, 10, -41, -21, -16, -5, -2, -1, -20, -10, -4, -42, -13, -15, 1, 7, -25, -5, 5, -4, 22, 1, -4, 15, -14, -17, -11, 25, 4, 
  -9, -20, -11, 23, -5, -5, -15, -1, 12, -2, 17, 0, -17, 9, 14, 11, 9, -13, 1, 17, 8, 10, -12, -21, 6, -10, -19, -23, 2, -2, 16, 20, -19, 1, 3, -20, 1, -21, -7, -22, -20, -25, 3, -18, 2, 11, 6, -17, 10, -12, 
  -13, 0, 9, -16, -22, -4, 13, -13, 18, 15, 0, -10, -30, 15, -16, 11, -2, -4, -9, -17, 6, -35, 4, -8, -10, -13, -18, -9, -16, 0, -22, -8, -30, -25, -14, -11, -14, 16, -29, 8, 3, -33, -14, -8, -25, 1, -1, -16, 32, 33, 
  -1, -15, 5, -14, -19, -13, -7, -1, 8, 3, 19, -17, -4, 11, 11, 5, -15, -23, -3, -17, 10, 20, -11, -12, -7, -18, -11, 2, -1, 14, 16, 4, -15, -3, -18, -10, -22, 4, -3, 1, -7, 5, -4, -21, 5, -1, -3, 0, -2, 5, 
  2, -18, 5, -19, 3, 16, -14, -21, -28, -19, 9, -17, -21, -26, 25, -2, -8, -35, -24, -3, 15, -12, -15, -2, 2, 16, -17, 27, 11, 14, 18, -8, -14, -6, -18, -8, 7, 6, -34, -42, -23, 30, 14, -33, -40, 17, 11, -22, -7, 6, 
  5, 28, -18, 18, -14, 17, -14, -19, 10, 6, 0, 0, 3, -1, 39, -5, -10, -16, -53, 0, -24, 12, -39, -10, 12, -14, -17, 8, 8, -21, 12, 2, -10, -22, 19, 14, -10, -23, -36, 16, -12, 82, -32, -10, 5, -12, 17, -40, -43, -4, 
  14, -42, 4, -4, -11, 22, 3, 14, 19, -2, -24, -5, 24, -13, -12, 11, 12, -4, 25, 10, -10, 20, 4, 21, 4, -1, -9, -16, -6, 12, 15, -25, -62, -26, -2, -1, -6, 9, -2, 6, 14, -17, 19, -28, 22, 24, 16, 19, -47, -30, 
  21, -6, -15, -10, 18, -4, -2, 6, 10, -8, 14, -26, 26, 12, -23, 2, 1, 6, -11, -22, 19, -16, -20, 4, 3, -21, -4, 4, 18, -25, -14, -9, -15, -11, -12, -4, 4, -11, -15, -21, -9, -5, -19, -19, 24, 16, 15, -2, -26, -28, 
  -14, 14, -22, 24, -15, 14, 0, -18, 19, -6, 9, -2, -7, -21, -11, 7, -25, -2, -19, -35, -3, -3, 6, -38, 11, 14, -17, 4, -17, -1, 23, -27, 1, 0, -19, 14, 24, 0, -6, -20, 2, 3, -3, -10, -9, -26, -6, 7, 36, -13, 
  5, 10, -37, 23, 5, 29, 12, 5, -23, 9, 39, -2, 4, 12, 10, 32, -25, -27, 2, -17, -14, 4, -4, -1, -16, -2, 0, 6, 12, -20, -10, 2, -26, -28, -9, 7, 11, -1, -51, -45, -1, 18, -13, -28, -35, -17, 14, -19, -2, 44, 
  -15, -23, 0, -13, 18, -11, 6, 6, -21, -15, 6, 13, -27, -2, 19, 1, 21, -21, -2, -3, 17, -9, -7, -19, 3, 8, -13, -13, 1, -15, -11, 7, -17, -11, 15, 9, 6, -25, -20, 7, -26, 7, 9, 2, 22, -23, -10, -26, -16, -18, 
  -5, -11, -8, 2, -9, 8, 13, 6, 16, -31, 1, -29, -12, -16, 0, 5, -33, -18, -9, 12, -1, 10, 5, -26, 10, -15, -12, -17, -11, 13, 9, -10, 8, 4, -3, 3, -21, 18, -20, 0, -8, -15, -4, -12, -14, -23, -9, -25, 11, 18, 
  -13, 12, 15, 5, -5, 22, 1, -24, -7, 11, -14, -33, 38, -6, 26, 10, -20, -40, -1, 8, -6, 0, 12, 1, -37, 14, -11, 25, -37, -2, -17, -11, -24, -11, 13, -22, 19, -16, -31, 39, -13, -8, -31, -45, -8, 2, 7, -23, 80, 127, 
  -9, 6, 5, -14, -16, 14, 9, 8, -20, 15, 5, 4, -9, -4, 7, -9, 11, -9, -2, -20, 12, -6, -28, 21, 10, -17, -10, 27, 4, 8, 9, 9, 16, 17, 22, -6, -22, 22, -13, 4, -6, 16, -11, 22, -11, 31, 17, -10, -19, 17, 
  -19, 5, -2, -13, -15, 0, -2, -7, -6, 18, -19, -6, -3, 21, -27, 11, 6, 15, -17, -2, 6, -27, 3, -23, -6, -10, 6, 3, 1, 19, -21, 3, -36, -8, -14, 3, 5, -18, 5, 7, -9, -6, -3, 9, 3, -21, -15, -26, -11, 14, 
  -12, -11, -20, -19, 10, 8, 17, 5, 2, 1, -3, -15, 15, -1, 2, 20, 10, 8, 2, 1, -7, -24, -7, 6, -27, 2, -20, -17, -19, -24, 7, -12, -31, -12, 1, 17, -8, -1, -5, -12, -1, -14, 12, -13, -18, -16, -7, -9, 34, 87, 
  -8, -19, -7, -18, -3, 7, -27, -13, 16, -4, 13, 8, 7, -20, -20, 3, -16, -18, -15, 0, 13, 23, -19, -2, 18, -13, -3, 10, 22, -14, 2, -32, 9, -24, -13, 21, -3, 17, -39, 22, -17, -18, 1, 12, -12, 18, -24, -5, 24, -5, 
  -15, -13, 22, 29, -29, -10, 4, -19, -3, -22, -5, 3, -15, 7, 3, -22, -10, -28, -14, -25, 2, 3, -7, -31, -10, -5, -10, -14, -22, 1, -2, 1, 2, -20, -7, -11, -8, 6, -14, 10, -15, -3, 1, -27, 7, -5, 19, 16, 1, 5, 
  -8, 5, -2, -11, -17, 5, -20, 4, -16, -9, -15, -10, 16, 11, 1, -17, -1, -32, -1, -11, -15, -29, -35, -11, -18, -22, 8, 6, -1, 20, -11, -24, -4, -30, -10, -21, 7, 14, -26, -9, -26, -3, -22, -17, -19, 0, 10, -26, -20, 5, 
  22, -9, -4, -20, 5, 13, 15, -15, -13, 15, -8, -3, 15, 3, 9, 10, -1, 19, 5, -16, -5, 11, 27, 9, 16, -20, -27, -13, 19, 9, -10, -1, -26, 7, 5, 7, -5, 12, -10, 26, 12, 8, -2, -10, -1, -23, -12, 22, 50, -8, 
  -10, 15, -37, -37, -33, 11, 6, -36, -1, -19, -33, -30, 2, 0, -20, 14, -28, -23, 18, 14, 3, -25, 2, 14, -29, 14, 8, -8, -27, -8, -17, 9, 3, -35, -14, -2, 8, 5, -13, -15, -12, -24, -30, 16, -43, -31, -10, -2, -76, -2, 
  -26, 23, -29, 8, -17, -3, 8, 13, 8, 14, 6, -11, -30, -14, -5, 22, 8, 7, -8, 11, 4, -21, 25, 12, -14, -18, 7, 0, 7, 2, 8, 2, 2, -16, 8, -22, 15, -8, -21, -19, -22, -23, -22, -15, -4, -15, 2, 19, 13, 29, 
  34, 22, 11, 0, -11, 9, -20, -21, 5, 6, -7, 0, -20, 9, 28, 1, -28, -15, -35, -3, -2, 9, 18, 12, -9, 3, -4, -26, -14, -3, -10, 11, -13, -20, 2, 20, 21, -5, -1, 0, 15, -13, 14, -27, 2, 20, 11, 6, -18, -10, 
  23, 38, -27, 6, 7, -9, -19, 9, -15, 14, 21, -22, -27, 9, 16, -9, 14, -18, 10, -10, 20, 18, -21, -1, -26, 12, -32, -14, -2, -11, -16, -25, -33, -9, -4, -1, 21, -8, 8, -23, -21, 8, 9, 17, 13, -30, 8, -6, -14, 1, 
  -59, -22, -31, -8, -24, -16, -22, -16, -16, -5, -18, -41, 2, -11, -37, 12, -36, -12, 23, -11, 0, -7, 1, -7, 15, 11, -34, -21, 2, 7, 2, -12, -22, -55, 19, 5, -19, 19, 13, -12, -13, 15, 9, -2, -13, 1, 9, -15, 24, 20, 
  17, -2, -6, 4, 31, 1, -11, -16, 11, -19, 17, -19, 16, -5, -33, -28, -11, -29, -16, -11, 18, 25, 47, -17, 5, 11, -10, -26, -6, -10, 0, -22, -15, -1, 18, -2, -11, 21, 0, 1, -14, 2, -9, 22, 5, 3, 4, 5, 46, -34, 
  -11, -32, -2, 16, -3, -14, -2, -20, -13, 5, 26, -27, -7, -26, 12, 8, 4, -29, -16, -4, -15, 0, 8, -4, -3, -22, -25, -7, -1, -21, -15, 0, 2, -36, 0, 23, -23, 8, -21, -9, -17, 25, -2, 7, 10, 21, -11, -22, 38, -11, 
  -29, 20, 11, -2, 19, 3, 27, -27, 17, -12, 5, 19, -19, -5, -35, 19, -13, -15, 7, 29, 21, 18, -19, -28, 1, -4, 23, 5, -3, 16, 12, -8, 19, 9, 15, 27, -16, -10, -12, 2, -14, 5, 19, -40, -5, -47, 3, -7, -10, 19, 
  4, 14, 20, 13, -18, 16, -8, 10, 8, -13, -4, -15, 8, 4, -3, 17, -15, -28, -29, -11, -21, -20, 14, -19, 15, 2, -12, -2, -18, -9, 14, -13, -13, -15, -13, -18, -19, 18, -18, -19, -22, -26, -22, -26, -24, 12, -21, -21, -20, -3, 
  -21, -6, -5, -4, 13, -4, -14, 15, -23, -22, 2, -15, 11, 11, -22, 13, -13, -19, -15, -9, -3, -24, 16, 26, 2, 13, 0, 19, -13, -2, -7, -13, -31, -33, 19, 5, -17, -23, 7, 6, 10, -14, 16, 24, 7, 27, -6, -17, -12, 1, 
  -22, 18, -16, 5, 3, 5, -25, 4, 4, -16, 11, 20, -16, 20, -22, 9, -21, -15, 25, -15, 2, -22, 11, -20, -29, 3, 11, 0, 14, -18, 18, -21, -42, -8, 13, -13, 14, -6, -33, 28, -31, 26, 23, -23, 12, -36, -2, -21, -12, -68, 
  -18, 1, 3, 13, 3, 18, -22, -25, -25, 12, -7, -18, 0, 19, -10, -10, 0, 8, -15, -24, 6, 5, -20, 17, 1, 3, -20, -3, 17, 10, 10, -19, -17, -23, -21, -25, 4, 12, 11, 10, 15, -4, 5, -31, -1, -22, -2, -3, -12, -10, 
  -17, 17, -17, 15, 18, -2, 14, 8, 14, -21, 2, 7, 17, -4, 4, -11, 2, -10, -8, 20, 2, -15, 19, 13, -26, 13, 5, 4, 14, 9, -23, 3, 21, 7, 3, 0, 18, 16, 4, 21, -9, 31, 4, 6, -3, 36, -7, 24, 34, -11, 
  -40, 20, -17, 19, -13, 24, -7, -24, -18, 21, -3, 34, -9, 2, -5, 14, 10, -13, -39, 15, -22, -10, -23, -6, -18, 13, -2, 15, 28, 0, 17, -31, -10, -13, -13, 36, -25, 4, -19, -9, -3, -6, -33, 20, 8, 27, 24, -3, 16, 6, 
  -16, -24, -26, 0, -2, 6, 19, 3, 14, 12, -19, 2, 8, -22, 12, 11, -3, -22, 1, -13, -10, -15, 8, -16, -4, -6, -3, -17, -18, 20, 19, -5, -24, 21, 5, -6, -17, 9, -25, 12, -3, 11, 15, -21, -11, 18, 17, -6, -10, 1, 
  -44, 21, 9, 9, 1, -14, 13, -19, -2, 16, -11, 11, 17, -14, -25, 17, -17, -9, -20, -11, -14, 16, 25, 15, -6, -3, -42, 18, 10, 8, 22, -9, -7, -23, 17, 3, -14, 4, -19, 32, 16, 25, 8, 29, -4, 31, -23, -2, 21, -33, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 50,50 } };
const TfArray<1, float> quant9_scale = { 1, { 0.010600458830595016, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[50*50] = { 
  10, -5, -10, -15, -13, -13, -7, 2, -2, 5, -18, -14, 11, -14, -8, 2, -4, 4, -10, -15, -12, 10, -6, 9, -12, 11, -11, 1, 10, 16, -4, 29, 14, 0, 8, 6, 14, -9, -9, -3, 6, -4, 5, 5, 0, -5, 3, 8, 15, -24, 
  -12, -15, -2, -14, 0, 4, 10, -7, 11, -7, -4, -26, -3, 13, -16, -14, 12, -7, -4, -9, -18, -14, 12, -15, -9, -6, 3, -3, -7, 1, -4, -5, -2, -2, 6, -1, 7, 8, -32, 0, 7, 7, -13, -13, -20, -10, -8, 13, 4, 4, 
  -10, 12, -15, -22, -6, -9, 7, -1, 5, 0, -6, 7, 13, -9, -11, 5, -16, 13, -8, 13, 10, -7, 13, 3, 13, 13, 7, 11, -2, 1, -3, -14, 5, -12, 10, 9, 11, 5, 27, -9, 1, 13, 2, 15, -3, -9, 17, -6, -4, -26, 
  -4, -13, -24, -20, -8, -9, 7, 3, -6, 3, -4, 11, 6, -11, 11, -14, 8, 12, 1, 0, 1, 11, -6, 10, 5, -3, 8, -1, -8, -1, -9, -1, -16, -13, 23, -6, -20, -8, -16, -9, 14, 9, -13, 13, 6, 1, -1, -14, -8, -9, 
  4, 4, -8, -14, 6, 20, -4, -23, 11, 3, 16, -3, -6, -6, -15, -11, -19, -18, 16, 0, -1, -19, -4, -13, -9, 16, 18, -15, 8, -22, -13, -5, -9, 6, 4, -8, 7, 5, -14, 0, 11, -18, -2, 8, 6, -5, -15, 7, -6, -4, 
  -24, -13, 6, -18, 21, -5, -6, -7, 2, 13, -13, 14, 3, -5, -7, -9, -5, -9, -6, -8, 5, -10, 14, -12, 7, 1, -11, -24, 10, 1, -4, 8, 10, 10, 8, 13, -13, 0, 9, 7, -7, 9, 2, -1, 22, 0, -18, 9, -10, 6, 
  -14, 11, -14, -27, -5, 18, 8, 14, 10, 12, -9, 5, -14, -8, -1, -11, 10, -11, 10, -4, -8, -7, 6, -6, 11, 0, 17, -13, 13, 2, -2, -4, 0, 6, 20, -10, -7, 1, 8, -10, 6, 16, 11, 5, -18, -3, 0, 10, -5, -2, 
  19, -17, -13, -11, -25, -16, -1, -14, 15, -19, -12, 1, 9, 5, -3, 14, 18, -8, 3, -17, -19, -16, -4, 20, 3, 12, -11, -20, 8, 4, 7, 4, 3, 0, 9, -3, -8, 1, -20, 3, 4, -16, 1, -14, -11, -6, -2, -8, 14, 7, 
  -27, -9, -1, -22, -10, -10, -2, -4, 10, -2, 10, 6, 14, -3, -10, 6, 26, -12, -13, -4, -18, 0, 2, -5, -3, -2, -9, 13, -7, 6, 15, 1, -3, 13, 19, 16, -17, 14, -30, -15, -5, -15, 3, 10, 2, 14, 5, 16, 4, 18, 
  -11, -13, 1, -18, -9, -3, -15, 6, -11, -4, -12, -7, 1, 12, 2, 0, -2, 2, -5, 4, -15, -20, 3, 20, 1, 4, 47, -8, 0, 5, 0, 4, 14, 10, 2, -1, 13, 19, -20, -15, 21, -11, 16, -8, -29, -2, 0, 9, -11, 4, 
  -11, -10, 12, -2, 18, -3, -29, -4, -10, 2, -19, -8, -13, -7, -24, -11, -86, 4, 103, 68, -4, -21, -38, 2, 7, -61, 7, -19, -8, -15, -2, 46, 22, -32, 42, 6, 6, -2, 13, -27, -10, 8, -5, 4, -11, -14, -33, 17, 5, -4, 
  -7, 12, 14, 6, -4, 32, -9, -6, 4, 4, 5, -12, 17, 15, 3, 3, 12, -6, -6, 11, 13, 10, 2, -5, 0, -8, -3, 15, -2, 1, -1, -21, 13, -7, 12, -11, 1, -8, 11, 15, 2, -13, 4, 18, -1, -3, 17, 17, 11, 14, 
  -17, 17, -14, -37, 15, -9, 3, -13, 7, -11, 6, 4, -8, 8, -4, -6, -12, -8, 14, 28, 3, 16, -2, -9, -1, 1, 34, 12, -10, -15, 4, 12, 17, -4, 0, 9, 9, 3, -1, 13, 18, 19, 10, -3, -7, -11, -13, 14, 0, -2, 
  21, -13, -22, 3, 9, 9, 8, -21, -11, 4, 7, 14, -2, -4, -8, 16, 3, -14, 9, -2, 2, -1, 5, 16, 3, 12, -9, 6, -12, -3, -5, 5, -10, -4, -4, 15, 4, 16, -11, -4, 3, 11, 3, -3, -3, 13, 4, -9, 4, 6, 
  -13, -3, -8, 2, -4, -9, -10, -6, 13, 9, 21, -5, 15, 19, -6, 5, 1, 5, -4, -1, 0, -1, 6, 12, 7, -20, -1, -2, 0, -1, -10, 7, 6, -3, 7, 2, -16, 12, -16, -13, -2, 8, -3, -13, 6, 5, -10, -7, 7, 8, 
  -11, 12, -10, -3, 9, 6, -6, -2, -9, -11, 0, 0, -11, 2, -1, -9, -2, -2, -3, -3, -2, 2, 0, -4, 2, 8, -10, 0, 6, 16, 3, -19, 4, -11, -16, 7, -7, -2, 7, -5, -1, 10, 15, -8, -6, -13, -10, 0, 9, -27, 
  -4, 0, -21, -27, -11, -12, -15, 4, 5, -15, -15, -9, -11, 12, 6, 8, 2, 11, 5, 6, 10, 9, 3, -10, -6, 8, 0, -4, 14, 24, 6, 11, -2, 1, -9, 0, 13, -15, 1, -10, -7, -16, -11, 7, -12, -7, -19, -14, -13, -8, 
  -11, -5, 3, -5, -14, -7, -12, 7, 8, -1, 9, -11, 10, 0, -6, -1, -1, 12, -3, -6, 5, 9, 2, 6, 6, -4, 4, -14, -4, -1, 4, 14, -9, -21, 6, -9, 11, -5, -11, -9, -11, 0, 2, 6, -8, 2, -3, 9, -2, -18, 
  1, -4, -18, -21, -4, -3, -2, -16, -2, 9, 2, 0, -15, -5, -7, -17, 8, 5, -11, 3, -10, -7, -6, 8, 0, 8, -17, -20, -9, 12, -12, -14, -15, -7, 13, -5, -1, -1, 0, 12, -7, -18, -14, -2, -6, -1, 10, -14, -13, 2, 
  -2, 9, -5, -3, -5, 0, -10, -9, -1, 3, -5, -14, 10, -8, -10, 5, -15, -2, 0, -15, 1, 4, -8, 6, -5, 5, 4, -9, -16, 13, -1, -8, 12, -18, 2, -12, 2, -9, 0, 0, 5, 9, 13, -4, -2, -7, -3, -8, 13, -4, 
  -15, -2, -22, 10, -10, -3, -9, 6, -9, -3, 4, 7, -3, -15, 5, 6, -20, 7, 5, 14, -16, -3, 6, 6, 12, 14, 2, -11, 9, 12, 8, -13, 4, -10, 4, -13, -14, 10, -7, -6, -10, 5, 7, -13, -12, -2, -18, -13, -4, 5, 
  -18, 6, -5, -22, 19, -10, 11, 11, -8, 2, -17, -14, -3, 8, 9, -4, -2, -13, 5, -16, 15, 12, -12, -3, -7, 9, 15, -6, 15, -5, -17, -12, 8, 7, 2, 14, 11, -9, -17, 3, 10, 12, -8, -13, -9, -1, -14, -14, -3, -14, 
  -30, -9, -5, -3, 6, 2, -18, -6, -6, 12, -2, -15, -5, -9, 7, 12, -15, -12, -3, -14, 5, 7, 0, -14, 5, 9, 12, 10, 3, 6, -14, -5, -9, -10, -12, -11, -5, 3, -5, 9, 12, -9, 0, -3, -6, 6, -6, -12, 2, -8, 
  -1, -5, -14, -2, -8, 12, -19, -13, -13, -7, 15, -17, 4, 8, 4, 2, 11, 11, -14, 9, 1, -20, -12, -6, 11, -11, -20, 1, -16, 8, -8, 4, 24, -20, 8, -6, -22, -17, 9, 12, -15, 7, 6, -5, -12, 4, -19, 8, -14, -6, 
  2, -6, 1, -4, -22, 13, -18, -5, 18, -3, -6, -8, 0, 6, -6, -11, -15, 2, -8, 7, -5, 0, -9, -1, -4, 10, -15, 3, -2, 22, -15, -22, 9, -9, 2, 15, -7, 18, -16, -15, -1, -18, -5, -12, -3, -11, 1, -2, 18, -13, 
  2, 14, -10, -5, -15, -4, -10, -15, -3, -3, -2, -3, -3, 6, -1, 12, -15, -13, 13, 6, 3, 13, -15, 0, -5, 5, -13, -5, 11, -6, 5, -19, -5, 12, -5, 11, -4, 9, -14, -4, 4, 13, 5, -10, -7, 10, -15, 2, -17, 0, 
  -18, 3, -14, -24, -9, -3, -12, -13, -2, -4, -6, -5, 5, 1, 6, -2, 0, -9, -2, 12, -3, 9, -7, 0, -13, 0, -8, -18, -9, 2, -6, -13, -12, -2, -23, -5, 3, -6, 2, -3, 4, 10, -8, 0, 3, 15, 7, 3, -15, 3, 
  -10, 0, -9, -11, -7, 3, -26, 16, 20, 21, -2, -3, -11, 15, 14, -5, -6, 7, -15, 8, -4, 17, -16, 24, 15, -1, 10, -5, 3, 18, -11, 12, 6, -2, -2, -1, 1, 5, 6, 21, -2, -6, 2, 13, -9, -3, -10, -4, 0, -9, 
  2, -1, -18, -10, 2, -1, -19, 12, 9, -24, -18, 10, 4, 14, 17, -3, -15, 8, 15, 15, -7, 11, -13, 2, 12, -4, 21, -13, -3, -5, 12, -11, 7, 11, -8, 1, 9, 3, -5, -13, 7, -16, 11, -16, -25, -16, -8, 10, -19, -1, 
  -3, -2, 1, -13, 0, 17, -12, -3, 11, -18, -14, 10, -17, 2, -18, -12, 12, -2, 6, 8, -2, 0, -15, -1, 4, 3, -6, -19, -15, -7, 3, 1, 1, -13, -10, -7, 10, -13, -2, -7, -16, 5, -8, -16, 8, 2, 9, -7, 14, 0, 
  -12, 4, -6, -7, -8, 41, -13, -25, -4, -29, -18, -2, 22, -11, -3, -14, -3, 4, -1, -10, -9, -22, -27, 16, 1, -2, 127, -17, -6, 16, -13, -9, -12, -24, -18, -7, 11, -11, -19, -52, -21, -3, 4, 20, -24, -7, -24, -9, 5, -32, 
  -25, -8, 17, 11, 6, 2, 0, 1, -1, 0, -2, 6, -14, 7, 0, 18, 10, 15, -3, -15, 0, 4, -20, 26, -7, 1, -24, -12, 1, -10, -11, -3, 3, 12, -2, 12, -8, -2, -10, -13, 11, 5, 3, -14, -2, 6, 0, -13, 1, -20, 
  27, -17, 13, 11, -2, 11, -9, 4, -11, -10, 14, 7, 3, -8, 12, -10, 0, -3, -14, -2, -9, 9, 5, -15, -6, 10, -7, -18, 4, 11, 13, 10, 27, -12, -6, 3, -4, 2, -17, 9, -13, 2, -3, -14, -13, 3, -15, -13, 8, -18, 
  -4, -5, -3, -5, 1, -6, -28, 2, 39, -5, 1, -6, 11, 1, -6, -16, 27, -4, 13, -25, -12, -22, 0, 21, 11, 13, 64, -16, -3, 12, -9, -1, -6, -15, -4, 4, -11, -16, -33, -40, -5, -6, 7, 31, -8, -5, -31, -1, -5, -10, 
  2, -9, 4, -11, 8, 9, 0, -16, 8, -13, -6, -8, 12, -14, -9, -16, 10, -18, -11, -16, -14, -15, -18, -13, 0, -8, -5, -8, -8, 10, 11, -15, -14, -29, 10, 1, 13, 13, 10, -17, -4, -18, -11, 9, 10, 5, 1, -27, -1, -9, 
  -7, -16, -9, -9, 1, -10, -3, -14, 11, 3, 3, -2, 7, -3, -10, 9, 14, -2, 9, -10, 3, -17, -7, -19, 12, 5, -6, -1, 16, -7, -13, 13, 5, -2, -4, 13, -11, -12, -3, -11, 4, -9, -15, 2, -14, -7, -9, 3, 5, -15, 
  -8, 0, -13, 7, 7, -4, -24, -3, 6, -7, -13, 2, -2, -6, -21, -13, 4, 1, -3, 0, -24, -6, 5, -26, 1, -4, -6, -10, 3, -4, -9, 11, 5, -6, -13, 11, -1, 0, -4, -11, -23, -21, -7, -14, -3, -5, -12, 3, 1, -16, 
  -4, -4, -22, -3, -21, 19, -5, -23, -24, -3, -7, -2, -7, -9, 1, 12, 11, 4, 3, 31, 14, 13, -9, -17, -9, -8, -6, -25, -10, -25, -9, 0, -11, 2, -8, -10, 8, -9, -2, 7, 26, -19, -9, -10, -1, -9, -13, 7, -9, -6, 
  -22, -8, -24, -5, 6, 3, -6, -20, 5, -5, -1, -10, -4, 20, 13, -15, -13, 9, -9, 14, -7, -16, 10, -5, -8, -11, -11, -2, 14, -2, -13, 13, -5, -21, 9, 10, -17, 0, 10, -17, 4, 1, 11, -8, -6, 0, -6, -10, -5, -1, 
  -32, -10, -4, -13, -4, -4, -16, -8, -4, 1, 6, -7, 11, 9, 3, -12, 7, 0, 1, 9, 17, -7, -15, 3, 7, 9, -7, 3, -16, -18, 21, -2, 2, -10, 20, -3, -12, 8, 10, -4, 27, -15, 2, 27, -1, 4, 4, 20, -4, 14, 
  -17, -6, 12, -6, -15, -8, -9, -7, -7, 3, -4, -8, 13, -10, 7, 0, 6, 6, -3, -14, -6, 14, -17, -14, 13, 8, -1, -13, 6, 1, -3, 16, -5, 0, 12, 21, 7, 11, 0, -8, -25, 4, -13, -3, -6, 12, -14, 9, 4, -18, 
  -14, -9, -22, -38, -6, -10, 9, -14, 5, 8, 11, 13, -1, -20, 12, -9, -4, 13, 1, 5, -27, 1, -8, -3, -9, 0, 9, 3, -10, 5, -8, -24, 14, -16, 15, 7, -6, -14, -17, -10, -5, 6, -2, -6, -1, -15, 15, -30, -15, -10, 
  -4, -16, 0, -10, -6, -3, -20, -19, 4, 15, 11, -4, -8, 3, 10, 1, -9, -3, -16, 22, -13, -9, -20, -11, -9, 9, -20, 0, -7, -13, 2, -9, 22, 10, 16, 4, -8, 17, 2, -7, 8, -5, 6, -1, 3, 12, -19, -4, -4, 9, 
  -13, -7, 6, -9, -19, -3, -6, -16, -18, -6, 6, -17, 1, -21, 2, -10, -7, 0, -10, -2, -20, -22, 13, -7, 4, -9, -4, -2, 10, 1, 8, -14, -5, -8, -21, -8, -6, -6, 11, 3, 4, -13, -10, 1, -21, -16, -18, -14, 18, 0, 
  -5, 8, -19, -11, -14, -12, 9, -3, -2, -3, 3, 2, -11, -7, 13, 11, 5, 3, 1, -15, -5, 15, 9, 2, -4, 10, -19, 2, 4, -5, -7, -8, -4, 3, -17, 4, 3, 6, 1, -1, 11, 9, -4, -14, -9, 5, -22, 5, -10, -12, 
  -1, -3, -15, -40, -15, 8, -13, -5, -13, -12, 6, -20, -16, 13, 0, 4, 2, 10, 3, 3, 2, -18, -17, 3, -8, 8, -21, -5, -16, 5, 1, 8, -24, -5, -29, 13, -17, -10, 10, -22, -1, 4, -3, -3, 14, -18, -7, -7, 12, 6, 
  0, 14, 1, -12, -8, -14, -20, -19, 6, -2, -5, 3, -5, -1, -4, 6, 1, 1, 11, -8, -3, -12, -1, -11, -2, -6, -16, -11, -3, 5, -18, 7, -5, -6, 23, -8, 7, 14, -6, 3, -4, -15, 3, 10, -1, 7, 4, -15, -2, 11, 
  12, -13, 5, 1, 7, 12, -8, 5, -14, -2, -20, -6, 11, 12, 6, -6, 12, -16, -4, -7, 13, 5, -18, 8, 3, -18, 31, -8, -16, -14, -3, -23, -39, -6, 27, 15, -7, -9, -12, 3, -6, 0, 13, 11, 10, 4, -4, -15, -9, -10, 
  -11, 9, -27, -11, -6, -19, 15, -9, -17, -3, 7, 8, 4, 18, -9, 12, -7, 5, -6, -10, -6, 7, -7, -15, -8, 4, -1, 9, 12, -4, 6, 3, -5, -1, -2, 11, 6, 15, 3, 2, -7, 0, 2, 11, -19, 13, 7, -16, 0, -5, 
  -19, -1, 0, -1, -11, 8, -2, -2, -14, -14, 17, -6, 2, -10, -1, 7, 27, 3, 10, -15, -4, -13, -9, 14, -8, -5, 8, -24, -16, 3, 1, 6, 4, -4, 3, -9, -17, -1, 4, 2, -33, 8, -3, 4, 13, -1, -9, -2, -15, -25, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 50,50 } };
const TfArray<1, float> quant10_scale = { 1, { 0.015444490127265453, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[50*50] = { 
  -19, -8, 4, -1, 11, -3, 6, 14, -19, 15, -4, -1, 11, -26, -5, -12, 18, -1, -6, 0, 5, -14, 1, 2, 9, 7, 4, 17, -15, -9, 7, -2, 1, 22, 17, 10, -14, 15, -17, -15, 11, 7, 9, 6, 9, -1, -9, -1, -11, 20, 
  -19, 1, -22, 3, -8, 6, 9, 10, 10, -17, 1, -11, -4, -23, -9, -24, -34, 0, -18, -12, -28, -16, 15, 9, -26, 7, -9, -25, 1, 18, -8, -22, 5, -3, 11, -23, 3, -30, 2, -12, -18, 16, -19, -15, -28, -19, -14, 17, -9, 11, 
  20, 7, -19, 8, -26, 19, -9, -1, -23, -30, -100, -17, -15, -25, -18, 11, -3, 8, -4, 1, -10, -17, 2, -15, -15, 20, 10, 9, 7, 9, -33, 10, -14, 22, -2, -20, 9, -23, 6, -20, 19, -46, -20, -21, -3, 7, -18, -23, -18, 43, 
  -22, -8, -10, -5, 6, -12, 5, 19, 6, -28, 5, -32, -9, 10, 16, 6, -6, -11, -13, -14, 16, -24, -4, -2, -14, 1, -9, 14, -20, -16, -2, -6, -23, -10, -15, 15, 0, -16, -19, -12, 7, -14, -15, -1, -12, 4, -9, -17, -7, -11, 
  3, -29, 6, 6, -17, -18, 1, -1, -2, -1, -1, -26, -5, -10, -20, -15, -8, -15, 14, 11, 21, -11, 13, 13, -1, -21, -17, 5, -12, 2, -17, -27, -8, 47, 3, -18, 16, -15, -5, -14, -4, 1, -10, -14, -16, -18, 4, 1, 4, -7, 
  2, 14, 5, 3, -17, -2, 14, 0, 1, 7, -7, -8, 12, 15, 10, -21, -17, 19, 0, 6, 15, -17, -14, 2, 15, 19, -17, -11, 8, -16, 6, 7, 18, -1, -15, -17, 22, 18, 18, -12, 15, 9, 21, 1, 18, 10, 8, -4, 15, -18, 
  -21, -17, 16, 6, -8, -17, 19, -13, 11, 1, 42, -33, 7, -9, -10, -7, -36, -18, -15, 0, 13, 6, 8, 10, -9, -16, 11, -17, 7, 1, 37, -4, 0, -37, 20, 10, 30, 11, 9, -4, 16, 1, -28, 8, -12, 2, -7, -14, -5, 19, 
  10, -9, -17, -21, 12, -12, 9, -8, -25, 3, 6, 1, 6, -8, -24, 13, -2, -4, -18, -9, 1, 10, 15, -24, 5, 16, 7, 6, 2, -23, -17, 3, -7, -11, 8, 17, 6, 6, -2, -23, -22, -13, -5, -15, -3, 8, -1, -21, 1, -3, 
  12, 10, -24, 11, -16, 4, 12, 0, 5, -15, -14, -15, 12, -24, 2, 8, 5, 18, -14, -9, 3, 1, 7, -8, -9, 14, -18, 15, 9, -16, 3, -17, 16, -12, -3, -11, -20, -23, 9, -2, 5, -3, -10, 0, -1, 8, 8, -17, -24, -26, 
  12, -23, -13, -2, 11, -1, 9, -16, 9, -12, 9, -7, 1, -5, -1, 8, -4, 19, -10, 22, -4, -19, 4, -25, -17, -11, 1, -25, -9, -16, -8, -19, -8, 11, 0, -15, 4, 10, 11, -18, 1, -14, -14, 3, 9, -1, -12, -20, -7, -9, 
  13, 13, -37, 7, 18, -18, 4, -12, -16, 6, 1, -2, 16, -23, 2, -23, 8, 4, -6, -3, 1, 17, -5, -17, -7, 20, 3, 2, 24, -18, 5, -26, -8, 54, -13, 18, -30, -14, 5, 4, -15, 6, 32, -22, 10, 3, 19, 7, 10, 21, 
  -8, 17, -8, -1, -10, -19, -13, -11, -32, -15, -17, -9, 12, -25, 0, -24, 0, -17, 7, 16, -30, -5, -22, -15, -42, -9, -1, -2, 0, 18, -17, -51, -10, -16, -15, -21, 0, -20, -10, -19, -14, 14, -3, -8, -5, 4, 3, -10, -26, 12, 
  -6, 2, -19, -5, 17, 1, -7, -5, -3, -16, -10, 14, -4, 7, 7, 15, -11, -5, 2, 13, 6, -15, 13, -21, 18, -13, 1, -11, 11, -4, -7, 3, -25, 6, 5, 21, 1, 17, 16, 11, 13, -3, 9, 1, -4, -3, 17, 8, -18, -12, 
  2, -37, -26, 2, -22, -15, -36, 18, 2, -7, -26, -27, -32, 7, -1, -9, -17, 16, -8, 6, 10, -17, 2, 0, 16, -18, -5, -23, -8, -9, 3, -13, -20, -28, 3, 5, 1, 1, 0, -23, -2, -9, 4, 9, 0, 12, -11, 3, 6, 4, 
  -1, 12, -2, -4, 12, -21, 7, 9, -2, -15, 2, -8, 8, -6, -17, 20, -14, 8, 15, -6, 0, -17, -8, -10, -23, -8, 11, -21, 14, -3, -10, -6, 32, 15, -7, -22, -20, -6, 9, 5, -3, 11, 6, 15, -13, -21, -4, -12, -12, -1, 
  -11, 7, -6, -16, 4, 8, -8, 19, -24, 20, -2, -9, 3, -6, 4, 0, 15, -6, -25, -10, 13, 3, -9, -14, -5, 8, -17, 40, 26, 30, 16, 16, -10, 27, 12, -10, 4, -14, -21, -5, 22, 5, -24, -38, -6, -6, -9, 1, -9, 17, 
  10, -1, -25, -13, -19, -13, 18, -14, -4, 21, -73, -16, -11, -10, 28, -19, -5, -14, 2, 0, -1, -8, 10, -1, 16, 17, 12, -2, 18, -22, -14, 20, -16, 2, -24, -13, 12, -12, 8, -1, -3, 11, 11, 1, -12, 9, -11, -7, 13, -15, 
  16, 6, 11, -11, 7, -18, -3, -12, 17, 12, -4, 21, 11, -19, 10, -1, 2, -7, 16, 9, -9, -10, 3, -1, -10, -3, 8, -7, 2, 1, -15, 9, -9, -7, -16, 5, -23, 14, 25, 27, -20, 2, 5, -9, -13, -13, -2, -16, 3, -22, 
  -17, -23, 18, -13, -17, -17, -4, 5, -18, 8, 11, -15, 11, -11, 2, -9, -8, -15, 1, 22, -17, 11, 18, 4, 4, -19, -8, 7, -25, -18, -13, -14, -4, 9, 15, -17, -12, -19, -3, 14, 9, -4, 6, -5, 7, 3, 22, -6, -1, -4, 
  -21, -24, -25, -31, 3, -14, -25, 13, -4, -9, -2, -23, -25, 2, -19, 15, 8, 11, 17, 4, 20, 1, -13, 11, -7, 3, -11, 21, -24, -10, -14, 9, 9, 13, 14, -7, 8, -25, 2, -19, -20, -21, -20, 11, 5, -11, 10, -7, 8, -35, 
  -13, 26, -18, -2, -14, -22, 9, 1, 2, -4, 8, -25, 12, 6, -7, 11, -22, -13, -2, 17, 21, 16, 16, 9, -10, 4, 18, 8, -21, -4, 24, -17, 12, -62, -15, -7, 8, -8, 13, -14, 5, 15, 12, -30, -9, -6, 17, -29, -24, -23, 
  -13, -4, 2, -10, 4, 17, -16, -16, 13, -23, -14, -27, 16, -25, 15, -13, -25, -14, -6, -11, -20, 6, 16, -7, 17, -3, -6, -11, -9, -8, 14, -20, -1, -41, -6, -9, -2, 12, 15, -3, -12, 7, 10, 9, 5, -16, -17, 0, 7, -25, 
  -2, 14, 8, 7, 23, -20, -3, -3, 21, -16, 47, 2, 17, 13, 20, -15, -4, 21, -4, -9, 10, 1, 3, 6, -9, -21, -8, 6, -15, 22, 18, 2, -18, -8, 3, -4, 9, 9, -18, 17, -9, 13, 7, -18, 8, 29, -5, -17, 10, -10, 
  17, -11, -14, 9, 11, -6, 2, -18, -15, -14, -13, -12, 8, -17, -9, 8, -12, -1, 13, -15, -23, -22, 7, -19, 9, 3, -3, -2, -13, -7, -9, -18, 0, -12, -11, 9, -11, -4, -20, -19, -11, 8, 7, -8, 0, 12, -22, -17, -24, -4, 
  2, -29, -8, 3, -13, -35, -1, -14, -3, -30, 127, -20, -41, -2, -11, 13, 0, -11, 7, -13, 14, -40, -17, 34, -7, -22, -14, -20, -16, -6, 41, 8, 3, 46, -21, -9, -13, -5, 20, -34, -6, -7, -4, -8, -29, -9, 4, -7, -22, -16, 
  24, 11, 11, -5, -6, 21, 23, -13, 19, -17, 11, -11, -14, 5, 15, 2, 9, -6, -2, 11, -12, -17, -13, 0, -6, 12, 19, -10, -7, -11, -4, 19, -11, 17, 14, 19, -8, 11, 2, 4, -17, -15, 17, 8, 18, 2, -18, 11, -4, 29, 
  14, 20, -22, -1, -4, 8, -12, 24, -27, -3, 17, -21, 12, -1, 12, 4, -13, 9, -18, 17, 2, 2, 11, -29, -9, 4, 0, 22, -7, 9, 14, -6, 34, 10, -7, -6, -2, -5, 2, -8, 16, -12, 2, -22, -8, -25, 16, 13, 11, -18, 
  -14, 4, -1, 11, -17, 16, 20, -6, -22, 23, -4, -35, 1, -28, -7, 20, 23, -20, 9, 9, -2, 29, -18, -21, -28, -19, -3, 22, -5, -11, -11, 17, 4, 13, 17, 9, -8, 1, -14, 7, -16, 5, -9, 1, 15, -4, -29, -10, -18, 25, 
  -19, 7, -24, -13, -9, -27, 14, -24, 16, 42, 19, -49, -24, 0, 6, -18, -5, -15, 13, 17, 4, -9, 17, -18, -21, -10, -21, 4, -10, -10, 28, -23, 1, 53, -1, 6, 17, -35, 5, -18, -23, 16, -9, 18, -19, 9, -8, 17, -11, 8, 
  1, -6, 11, 5, 11, -26, -20, 1, 7, 13, 9, 7, -18, 14, 12, 19, 1, -19, 1, -17, -21, -24, 12, 14, -11, 3, -19, 8, -24, 8, -15, 2, 14, 7, -3, 5, 15, -11, 0, 5, -22, -1, 4, -1, -20, 10, -1, 6, -6, -8, 
  6, -6, -7, -17, 18, -19, 15, 13, -16, -14, -23, -28, -3, 17, -9, 6, -5, 17, -8, 9, 16, -13, -2, 20, 5, -18, 19, -13, -13, 18, 11, -19, -30, -16, -7, 11, -12, -20, 25, 10, 9, -21, -13, -13, 10, -20, 8, 9, -4, -14, 
  4, -22, -12, -18, -9, -26, -15, 4, -9, 19, 3, 6, -8, 20, 1, -20, -11, 9, -5, -10, 4, -12, 8, 16, -11, 1, 10, -8, 12, -13, -25, 6, 9, 27, -10, 19, 9, 5, 19, -16, -13, -23, 0, -4, 16, -1, -10, 0, 9, 6, 
  -10, 21, 9, 1, -1, -9, -3, 14, 8, 30, -7, 4, -13, 23, 0, -22, -10, -2, -32, 19, -12, 16, -14, -27, 1, -3, -1, 9, 1, -4, 11, 4, -9, -21, -15, 8, -9, -14, 6, -4, 14, 35, 16, -31, -12, 15, 2, -22, 19, -29, 
  -19, -20, -18, -20, -11, -8, -31, 20, -29, 3, 61, -27, -12, 15, 17, 8, 9, 14, 0, 7, -12, -12, 4, -4, -8, -23, 14, -1, 1, -3, 27, 1, 0, 22, 17, -1, -15, -10, -22, -10, -3, -5, -16, 1, 15, 19, 23, 3, -6, -16, 
  11, 22, 19, 21, -9, 32, 6, -3, 3, 1, -3, 7, 17, -16, 2, 15, 13, 2, 11, 6, -8, 19, 4, -11, -8, 0, 23, -13, -23, -7, -14, 2, -2, -9, -18, -1, 2, -11, 8, -18, -6, 22, 27, 15, 5, 11, -2, -23, 9, 4, 
  15, -5, -4, -21, -13, 45, -19, -5, -17, -1, 8, -3, -21, -15, -11, -5, -5, -7, 29, 0, -2, -6, -16, -19, -1, 19, -21, 3, 2, 0, 15, -11, -7, 24, 23, 14, 0, 19, -36, -5, -12, 8, 18, 24, -1, 9, -17, -103, -15, 21, 
  -14, -3, -3, -1, -10, -2, 16, -23, -3, -8, -9, -23, 1, -15, 2, -3, 9, 13, 18, -21, -15, -15, -8, -25, -28, -16, 14, 10, -8, 7, 4, 9, 0, -43, 1, 16, -10, 14, 2, 21, 9, 5, -18, 0, 12, 4, -21, 24, 1, 13, 
  -6, -6, -15, 5, -29, 14, -1, 1, -2, 31, -11, -22, -7, 7, -18, 4, -1, -23, -17, 11, -18, 17, -7, 12, -26, 3, 17, 14, 20, -15, 3, 2, -6, 7, -16, -23, 11, -12, 11, -10, 1, -3, -13, -8, -10, -16, 19, 10, -34, -7, 
  10, 9, -16, -21, 17, 3, -15, 26, -26, -47, 18, 3, -40, -5, 8, 14, -20, -16, -14, -12, -17, -44, 7, -39, -30, 1, -6, -35, -8, -21, -26, -3, -33, 7, 13, -14, -2, -2, 3, -23, -8, -8, 17, -6, -26, -1, -20, -43, -27, -25, 
  16, 19, -38, -23, 15, -13, -8, -29, 1, 7, 25, -4, -22, -7, -7, -5, -47, 14, -10, -12, -2, -19, -4, 6, 5, 12, -11, -20, -16, -6, -17, -12, -21, -11, 4, -1, -10, -12, -23, 4, 3, -20, 61, 10, -43, 3, -15, 6, -27, 9, 
  -15, 2, -41, -30, -52, -22, -40, -19, -32, 0, 38, -30, -37, 9, -18, -11, -40, 4, 4, 10, -9, 1, -9, -26, 0, -2, -7, -6, -15, 5, 19, -3, -29, 15, -8, -1, -13, -16, -8, 48, -26, -22, 8, 2, -37, -9, -28, 10, -20, -10, 
  -16, 0, 8, 15, -12, -63, -3, -15, 8, -2, 4, -14, 17, 18, 12, 14, 0, -16, -15, -6, 1, -19, 20, 17, -2, -8, -10, -16, -12, -4, -12, -19, -21, -4, -16, 10, 9, -17, 4, -9, 13, 25, 21, 4, -15, -13, 16, -11, 18, -20, 
  -10, -7, 2, 16, 3, -16, -3, 26, 0, -4, 15, -1, 16, -13, 18, 3, -21, -9, 18, -13, 5, 10, 1, 20, 17, 19, -1, -11, 1, 1, 0, -16, -12, 11, 12, 1, 0, -10, 18, -10, -8, -9, 3, -22, -5, 11, 9, 7, 4, -2, 
  10, -17, 8, 21, 16, -13, 9, -14, 7, -12, -17, -23, 7, -19, -5, -13, 8, 9, -17, 2, -3, -10, 14, 8, -4, 0, 6, 13, -15, -3, -22, 0, -8, 13, 11, 9, -2, 4, 0, -25, -9, -18, -16, -15, -27, 0, -18, -13, 1, 7, 
  -12, 22, -45, -31, -32, -36, -46, 6, 10, 15, 11, -9, 10, -12, 17, -24, 5, 8, -3, -17, 8, 5, -11, 20, 11, 28, 6, 12, 35, -13, -14, -14, -30, -15, 12, -6, -22, -5, -1, 26, 4, -44, 23, 4, 1, 15, 8, 2, -8, 0, 
  3, 6, 1, -3, -1, -2, -11, -9, 10, 10, -6, -26, -13, -19, 5, -19, 3, 14, 11, 19, 11, -21, -4, 9, 4, -20, -1, -22, 1, 18, 3, -27, 8, 1, 0, 6, -14, -5, 5, -18, -5, -2, 3, -3, -20, 6, 15, 8, -8, -6, 
  0, -10, 1, 1, 8, 12, 13, 3, -14, -24, 27, -25, 14, -15, 13, -6, 0, 20, 9, -6, 15, 9, -18, 8, -12, 2, -4, -10, -10, -1, -4, 6, -8, 1, 19, 6, 1, 11, -9, -6, -15, 11, 6, -6, 23, -7, -17, -2, 6, 1, 
  15, 0, 20, -8, -8, -32, 16, -6, 1, 5, -14, -17, 10, 4, -3, 15, -15, -15, 4, -2, 16, 17, 16, -18, 13, -11, -11, 3, 20, 6, -2, -17, 2, -14, 9, -18, 23, -12, -9, 1, -3, 23, -18, -25, 9, -11, 8, -1, 9, -19, 
  -16, 6, 0, 4, 12, 6, -15, 7, -28, 21, -3, -23, -2, 7, -17, -1, -2, -12, 19, -12, 23, 18, 0, 5, -20, 15, -2, -5, 11, 11, -17, -7, 31, 20, -4, -25, 4, -1, -20, -22, 7, 37, -12, -28, 13, -6, -15, 15, -3, 10, 
  -6, -17, -26, -10, -36, -16, -1, -22, 7, 0, 21, -7, -1, 8, 6, -1, 9, -3, -17, -1, 10, 1, -14, 1, 9, 15, 9, 10, 19, -19, -19, -25, -18, 10, -7, -4, -13, -3, -8, 20, 19, 2, 8, -9, -14, 3, -2, -12, -8, -17, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 50,50 } };
const TfArray<1, float> quant11_scale = { 1, { 0.011519243940711021, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[3*50] = { 
  25, -26, -68, 43, -27, 53, 16, 32, 8, -41, 8, -5, 7, 53, -45, -22, 7, 25, 12, 52, -30, 39, 6, -18, 30, 17, -11, -74, -50, 38, 4, -19, 31, 41, -2, -41, -47, -74, -3, -33, 1, 19, -27, -23, 0, -19, -31, -7, -85, 46, 
  36, 6, -36, -1, 15, -10, -35, 42, 28, -57, 62, 25, -99, 9, -40, 56, -65, -31, -14, 21, -4, 23, -78, 25, 2, -37, -14, 49, 24, -106, -35, -127, -79, 15, -4, 45, -24, 40, -122, -33, -4, -110, -52, -33, -9, 57, 27, -49, -3, 21, 
  40, -33, 83, 37, 24, 60, 38, 37, 24, -35, 28, -20, -10, -11, -20, -14, 41, -34, 1, 46, 27, 34, 3, 15, 18, 25, -17, 38, -11, 34, -22, -13, 39, -4, 38, 81, -10, -6, -3, -33, 34, 50, -35, -5, -38, -6, 57, 20, -8, -5, 
};
const TfArray<2, int> tensor_dimension12 = { 2, { 3,50 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0051592974923551083, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,50 } };
const TfArray<1, float> quant13_scale = { 1, { 0.91000282764434814, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,50 } };
const TfArray<1, float> quant14_scale = { 1, { 0.72230368852615356, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,50 } };
const TfArray<1, float> quant15_scale = { 1, { 0.64032715559005737, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,50 } };
const TfArray<1, float> quant16_scale = { 1, { 0.36097753047943115, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<2, int> tensor_dimension17 = { 2, { 1,50 } };
const TfArray<1, float> quant17_scale = { 1, { 0.2198246568441391, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,3 } };
const TfArray<1, float> quant18_scale = { 1, { 0.39832088351249695, } };
const TfArray<1, int> quant18_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,3 } };
const TfArray<1, float> quant19_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,7,1 } };
const TfArray<1, int> outputs0 = { 1, { 13 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 13,8,3 } };
const TfArray<1, int> outputs1 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 14,9,4 } };
const TfArray<1, int> outputs2 = { 1, { 15 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 15,10,5 } };
const TfArray<1, int> outputs3 = { 1, { 16 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 16,11,6 } };
const TfArray<1, int> outputs4 = { 1, { 17 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 17,12,2 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension0, 33, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 2500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 2500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 2500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 2500, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 150, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension13, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension14, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension15, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension16, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension17, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 64), (TfLiteIntArray*)&g0::tensor_dimension18, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[7] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[7] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 20, };
const size_t tflNodes_subgraph_index[] = {0, 7, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  19, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_38_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 20;
  for (size_t i = 0; i < 20; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_38_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_38_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_38_invoke() {
  for (size_t i = 0; i < 7; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_38_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
